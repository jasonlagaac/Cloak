#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__) + '/../lib' 
require 'rubygems'
require 'commander/import'
require 'highline'
require 'bcrypt'
require 'cloak'


## 
#Setup Information
program :version, Cloak::VERSION
program :description, "
    CLOAK is a simple password storage and reminder
    system that stores all your credentials in an 
    encrypted format using the Blowfish cipher. So all 
    you need now is to remember a single password.

    DISCLAIMER:
    Even though Blowfish is not broken, I'd like to say 
    that I would not want to save really sensitive data 
    using Cloak. Maybe just some non-trivial stuff, like 
    twitter or logins that don't really matter. 
    
    !!! USE AT YOUR OWN RISK !!!
"

program :help, 'Getting Started', "
    To get started with cloak, please execute the following:

        cloak init
    
    This will initialise your password and the necessary files.
"

program :help, 'Author', "Jason Lagaac <lagaac.j@gmail.com>"


default_command :help
list = Cloak::List.new

command :init do |c|
  c.summary = 'Initialise cloak'
  c.syntax = 'cloak init'
  c.description = 'Initialise cloak'

  c.action do |args, options|
    begin
        file_path = File.expand_path("~/.cloak_password")
        if !File.exist?(file_path)
          cloak_password = password "Please enter your cloak password: ", ""
          cloak_password_confirm = password "Please confirm your cloak password: ", ""
        
          if (cloak_password.eql?(cloak_password_confirm))
            password = BCrypt::Password.create(cloak_password)
            File.open(file_path, "w") do |file|
              file.write(password)
            end
            Cloak::List.new
            say "Cloak successfully configured"
          else
            raise "Error: Your passwords do not match"
          end
        else
          raise "Error: Cloak is already configured"
        end
    rescue Exception => e
      puts e.message
    end
  end

end

command :add do |c|
  c.summary = 'Add a new entry' 
  c.syntax = 'cloak add \'<item description>\'' 
  c.description = 'Add a new entry to the list'
  
  c.action do |args, options|
    begin
      raise "Please enter a valid Description. Eg: cloak add \"Twitter Password\"" if (args.count == 0)

      cloak_password = password "Please enter your cloak password: ", ""

      if (Cloak.verify_password(cloak_password)) 
        password_stored = password "Please enter the password to be stored: ", ""
        password_stored_confirm = password "Please confirm the password to be stored: ", ""
      
        if (password_stored.chomp.eql?(password_stored_confirm.chomp))
          entry = Cloak::Entry.new(args.first)
          entry.encrypt(password_stored, cloak_password)
          
          list << entry
          list.save
          say "\"#{entry.description}\" - Added"
        else
           raise "The passwords to be stored do not match. Please try again."
        end
      end
    rescue Exception => e
      say e.message + "\n"
    end
  end

end

command :list do |c|
  c.summary = 'List all entries'
  c.syntax = "cloak list"
  c.description = "List all entries stored"

  c.action do |args, options|
    begin

      cloak_password = password "Please enter your cloak password: ", ""

      if (Cloak.verify_password(cloak_password))
          list.entries.each_with_index do | entry, i |
            say '%2d. %-45s : %s' % [i, entry.description, entry.decrypt(cloak_password)]
          end
      end
    rescue Exception
      puts ""
    end
  end

end

command :remove do |c|
  c.summary = 'Remove an entry'
  c.syntax = 'cloak remove <item number>'
  c.description = 'Remove an entry from the list'

  c.action do |args, options|
    begin
      cloak_password = password "Please enter your cloak password: ", ""

      raise "Invalid entry: " + args.first + " - Please try again." if !list.entries.at(args.first.to_i)

      if (Cloak.verify_password(cloak_password))
          entry = list.entries.delete_at(args.first.to_i)
          list.save
          say entry.description + " - removed"
      end
    rescue  Exception => e
      puts e
    end
  end

end

command :clear do |c|
  c.summary = 'Remove all entries'
  c.syntax = 'cloak clear'
  c.description = 'Remove all entries'

  c.action do |args, options|
    begin
      cloak_password = password "Please enter your cloak password: ", ""

      if (Cloak.verify_password(cloak_password))
        list.entries.clear
        list.save
      end
    rescue Exception
      puts ""
    end
  end

end
